{"version":3,"sources":["src/modules/dashboard/components/dashboard.tsx","src/modules/dashboard/containers/dashboard-container.tsx","src/modules/dashboard/dashboard.layout.tsx","src/modules/dashboard/dashboard.store.ts","src/modules/dashboard/dashboard.service.ts","src/modules/dashboard/dashboard.root.tsx"],"names":[],"mappings":";;;;;;eIAe;AJAf,AEAA,AGAA;;AHCA,AGAA;;ALCA,ACFA,ACOA,AGJA,ILDM,SAAS,GAAsB,SAA/B,SAA+B,GAAA;AACnC,SAAO,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAA,uBAAA,CAAP;AACD,ACHD,ACQA,AGLA,AFJA,CHEA;;ACGA,AIAA,eLCe;;AEUf,IAAM,eAAe,GAAuC,SAAtD,eAAsD,CAAC,EAAD,EAA4B;MAAzB,SAAA,GAAA,EAAA,CAAA;MAAW,EAAA,GAAA,EAAA,CAAA;MAAA,OAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA;AACxE,MAAM,WAAW,GAAG,4BAAgB,OAAhB,CAApB;AACA,SACE,eAAA,aAAA,CAAC,6BAAD,EAAO,IAAP,EACE,eAAA,aAAA,CAAC,sBAAD,EAAO,IAAP,EACE,eAAA,aAAA,CAAC,qBAAD,EAAM;AAAC,AGNf,IHMe,AGNT,KHMc,EAAA,IAAN,IGNO,GAAiC,SAAhD,eAAgD,CAAC,EAAD,EAAuB;AHMxD,IAAA,EGNoC,EHMhC,EAAE,KGN8B,GAAA,EAAA,CHMnB,AGNmB,CHMlB,GAAD;AAAxB,GAAN,EACE,CGP0D,OAAA,GAAA,EAAA,CAAA,CHO1D,aAAA,CAAC,2BAAD,EAAmB,IAAnB,CADF,CADF,CADF,CADF;AASD,AGXS,CHAV,KGAU,KAAA,GAAA,qBAAA,IAAA,mBAAA,CAAA,mBAAA,CAAA,EAAA,CAAA,CAAA;AACR,AFfF,IAAA,KEgBI,SFhBJ,MEgBI,aAAA,CAAC,mBAAD,EAAS;AAAC,AFhBd,IEgBc,KAAK,EAAE,IHWN;AGXF,AFhBb,GEgBI,EACE,OFjBN,QEiBM,aAAA,CAAC,kBAAD,EAAgB;AAAC,AFdrB,IEcqB,OAAO,AFd5B,EEc8B,OAAV,KFdpB,CAAa,OAAb,EAAoB;AEcmB,AFdvC,IEcuC,IFdvC,KEcgD,AFdhD,EEckD,CFdlD,IAAA;AEcoB,GAAhB,CADF,CADF;AAKD,AFnBuB,CEYxB,QFZwB,IAAA,GAAe,WAAf;;AAMtB,SAAA,MEea,CFfb,GAAU,YAAA;AACR,aAAO,KAAI,CAAC,IAAZ;AACD,KAFD;;AAHE,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,OAAvB;AACD;;AAJW,EAAA,UAAA,CAAA,CAAX,gBAAW,CAAA,0BAAA,QAAA,QAAA,CAAA;;AASd,SAAA,cAAA;AAVA,CAAA,EAAA;;eAAqB;;AFKrB,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAAjC,WAAA,kBAAA,GAAA;;AAMC;;AALC,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WACE,eAAA,aAAA,CAAC,kBAAD,EAAU,IAAV,CADF;AAGD,GAJD;;AAKF,SAAA,kBAAA;AANA,CAAA,CAAiC,gBAAjC,CAAA;;eAQe,uBAAO,UAAC,SAAD,EAAe;AACnC,SAAO,IAAP;AACD,CAFc,EAEZ,kBAFY","file":"dashboard.root.f868f019.js","sourceRoot":"..","sourcesContent":["import React, { FunctionComponent } from 'react'\r\n\r\nconst Dashboard: FunctionComponent = () => {\r\n  return <div>This is the dashboard</div>\r\n}\r\n\r\nexport default Dashboard\r\n","import React, { Component } from 'react'\r\nimport { inject } from 'mobx-react'\r\n\r\n// import DashboardStore from '../dashboard.store'\r\n\r\nimport Dashboard from '../components/dashboard'\r\n\r\nclass DashboardContainer extends Component<{}, {}> {\r\n  render () {\r\n    return (\r\n      <Dashboard/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default inject((allStores: any) => {\r\n  return null\r\n})(DashboardContainer)\r\n","import React, { FunctionComponent } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom'\r\n\r\nimport DashboardContainer from './containers/dashboard-container'\r\n\r\nimport { memorizeBaseUrl } from '../../utils'\r\n\r\ntype DashboardLayout = {\r\n  authInfos?: object,\r\n  baseUrl?: string\r\n}\r\n\r\nconst DashboardLayout: FunctionComponent<DashboardLayout> = ({ authInfos, baseUrl = '' }) => {\r\n  const withBaseUrl = memorizeBaseUrl(baseUrl)\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path={withBaseUrl('/')}>\r\n          <DashboardContainer/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default DashboardLayout\r\n","import { observable } from 'mobx'\r\n\r\nexport default class DashboardStore {\r\n  @observable protected name: string = 'dashboard'\r\n\r\n  constructor (service) {\r\n    console.log('service', service)\r\n  }\r\n\r\n  getName = () => {\r\n    return this.name\r\n  }\r\n}\r\n","export default {\r\n}\r\n","import React, { FunctionComponent, useState } from 'react'\r\nimport { Provider } from 'mobx-react'\r\n\r\nimport DashboardLayout from './dashboard.layout'\r\nimport DashboardStore from './dashboard.store'\r\nimport DashboardService from './dashboard.service'\r\n\r\nimport RootStore from '../../models/rootstore'\r\n\r\ntype Dashboard = {\r\n  authInfos?: object, // might contains authToken, referer, method to refresh token...\r\n  baseUrl?: string,\r\n  rootStore?: RootStore\r\n}\r\n\r\nconst DashboardModule: FunctionComponent<Dashboard> = ({ authInfos, baseUrl }) => {\r\n  const [ store ] = useState(new DashboardStore(DashboardService))\r\n  return (\r\n    <Provider store={store}>\r\n      <DashboardLayout baseUrl={baseUrl} authInfos={authInfos} />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default DashboardModule\r\n"]}